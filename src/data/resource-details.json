[
  {
    "id": "1",
    "type": "Course",
    "duration": "8 min",
    "title": "Build a Machine Learning Model",
    "level": "Intermediate Level",
    "preview": "Learn to build machine learning models using regression, classification, and clustering. For many, Python isn’t a language of the past, but one of the present and future. Although Python was created in the 80s, it’s very prominent in web development and industries that depend on flexible, and simple programming languages. Python fits that bill better than many other languages. In fact, Python is such a simple language to learn and use that it’s often one of the first languages those new to programming work with. What makes Python so easy to use? First off, it’s an interpreted language, which means you don’t have to compile code in order to execute it: you simply write and run your code. Python also adheres to a philosophy that makes it possible to write very few lines of code to complete a task. And with so many available modules, classes, exceptions, data types, and libraries, there’s very little this language can’t do. Although Python’s specialty is web and web applications, it has a number of other tricks up its sleeve. One such trick is Machine Learning. For those that don’t know, Machine Learning is a subset of Artificial Intelligence where computer algorithms automatically improve through experience. In other words, making a computer perform some task without actually programming for said task. And considering Machine Learning has become widespread, with companies like Google, Amazon, LinkedIn, and Facebook depending on it, ML is making it possible for exponential leaps in modern technological advances. Let’s take a look at why you should consider Python for your machine learning needs. Is Python fast enough for machine learning? Although Python isn’t the fastest programming language available, it has already proved itself more than capable enough to handle the demands made by Machine Learning. To overcome what some might consider a downfall, Python has a number of tools available to compensate. For example, Pandas is a tool used in data science for cleaning, transforming, manipulating, and analyzing data. With such tools, you can ensure the data you use with Machine Learning is better optimized for usage. Which Python version is best for machine learning? At one point, the best version of Python to use for Machine Learning was 2.7. However, the 2.x iteration of Python has been sunsetted, which means you will have to use a version of Python 3.0 or newer. As of this writing, the most recent stable release of Python is 3.9.0. If you want to have the most recent features and security updates, your best bet is to use that or more recent versions (if available).",
    "contributor": "Anna Lei",
    "tag1": "Python",
    "tag2": "Machine Learning",
    "tag3": "Regression",
    "tag4": "Big Data"
  },
  {
    "id": "2",
    "type": "Article",
    "duration": "5 min",
    "title": "Quibusdam magni",
    "level": "Beginner Level",
    "preview": "Lorem ipsum dolor sit, amet consectetur adipisicing elit. Expedita, facilis eius accusantium quia voluptas cum ex quo, dolores, quam harum quae impedit. Harum, possimus tenetur commodi nam et odit labore! Praesentium, a! Animi odio distinctio rerum! Distinctio ut eum eius, ipsa asperiores obcaecati possimus deserunt mollitia ea voluptatibus. Iusto adipisci facilis tenetur dolor unde, aspernatur voluptate laudantium commodi sit natus, harum necessitatibus voluptatem modi laboriosam quisquam eaque, facere praesentium veniam omnis rem! Maecenas ornare lobortis metus id sagittis. Nunc eleifend, ante ac tincidunt sollicitudin, lectus nisi ullamcorper erat, et consectetur magna erat quis quam. Mauris accumsan augue vel mi auctor tempus. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent hendrerit faucibus elit. Pellentesque in ligula fringilla, rhoncus turpis a, lobortis augue. Sed vitae venenatis erat. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Curabitur lacinia hendrerit scelerisque. Nulla malesuada, orci non facilisis aliquet, elit augue posuere nisl, sit amet porttitor felis magna at neque. Etiam scelerisque interdum mi sed molestie. Etiam vitae elementum risus, nec elementum enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Nam tristique augue nec tortor varius, et condimentum augue congue. Donec imperdiet iaculis consequat. Proin sit amet elit eu dui dictum eleifend. Nullam quis leo urna. Nulla egestas, purus sit amet pharetra sollicitudin, nibh est volutpat dolor, ut suscipit tellus sapien nec nulla. Integer felis nulla, tempor sit amet mauris eu, aliquet mattis odio. ",
    "contributor": "Jon H",
    "tag1": "Lorem",
    "tag2": "Dolor Sit",
    "tag3": "Amet",
    "tag4": "Expedita"
  },
  {
    "id": "3",
    "type": "Course",
    "duration": "7 min",
    "title": "The Interactive Guide to Rendering in React",
    "level": "Advanced Level",
    "preview": "React, in its purest form, is a library for building user interfaces. It's so simple that the entire mental model can be represented as a formula, v = f(s) – where your view is simply a function of your state. When React renders a component, two things happen. First, React creates a snapshot of your component which captures everything React needs to update the view at that particular moment in time. props, state, event handlers, and a description of the UI (based on those props and state) are all captured in this snapshot. From there, React takes that description of the UI and uses it to update the View. In order to get the starting UI for your application, React will do an initial render, starting at the root of your application. Of course, this initial render is the most uninteresting one. Without the ability to re-render, React would be mostly useless. It's how React treats all subsequent renders that's what makes it more interesting. That naturally leads us to our next question, when exactly does React re-render a component? Looking back to our v = f(s) equation, your intuition might be that f is invoked whenever s changes. That would make sense. We wouldn't want to recalculate the View unless the State had changed. In fact, it's as simple as that. When does React re-render? React will only re-render when the state of a component changes. This may be surprising, but it's true. The only thing that can trigger a re-render of a component in React is a state change. With that, we now have our final interrogative, how does React actually know when the state of a component has changed? At this point it's fairly trivial and, once again, it has to do with our snapshot. When an event handler is invoked, that event handler has access to the props and state as they were in the moment in time when the snapshot was created. From there, if the event handler contains an invocation of useState's updater function and React sees that the new state is different than the state in the snapshot, React will trigger a re-render of the component – creating a new snapshot and updating the view.",
    "contributor": "Bella M",
    "tag1": "React",
    "tag2": "Rendering",
    "tag3": "State",
    "tag4": "Event Handler"
  }
]
